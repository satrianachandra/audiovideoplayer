/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package player;

import java.awt.Component;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import javax.swing.JComponent;
import javax.swing.JFileChooser;
import javax.swing.JPanel;
import javax.swing.JSlider;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import org.gstreamer.State;

/**
 *
 * @author chandra
 */
public class GUI extends javax.swing.JFrame {
    
    AudioVideoPlayer myPlayer;
    
    /**
     * Creates new form GUI
     */
    public GUI() {
        initComponents();
        buttonPause.setLocation(buttonPlay.getLocation());
        buttonPause.setVisible(false);
        setVisible(true);
        
        sliderVolume.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent ce) {
                JSlider source = (JSlider)ce.getSource();
                //if (!source.getValueIsAdjusting()) {
                    int volume = (int)source.getValue();
                    myPlayer.setVolume(volume);
               // }
                
            }
        });
        
        
        sliderTime.addMouseMotionListener(new MouseMotionListener() {

            @Override
            public void mouseDragged(MouseEvent me) {
                myPlayer.animationMode = false;
            }

            @Override
            public void mouseMoved(MouseEvent me) {
                //throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
        
        sliderTime.addChangeListener(new ChangeListener() {

            @Override
            public void stateChanged(ChangeEvent ce) {
                JSlider source = (JSlider)ce.getSource();
                
                if (!source.getValueIsAdjusting()) {
                    
                    if (!myPlayer.animationMode){
                        int time = (int)source.getValue();
                        myPlayer.seekTo(time);
                        myPlayer.animationMode  = true;
                    }
                    
                }
                
                
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonPlay = new javax.swing.JButton();
        buttonStop = new javax.swing.JButton();
        buttonRewind = new javax.swing.JButton();
        buttonFastForward = new javax.swing.JButton();
        buttonMute = new javax.swing.JButton();
        sliderVolume = new javax.swing.JSlider();
        buttonFullScreen = new javax.swing.JButton();
        sliderTime = new javax.swing.JSlider();
        buttonOpenFile = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaInfo = new javax.swing.JTextArea();
        panelVideo = new javax.swing.JPanel();
        buttonPause = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        labelTime = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        buttonPlay.setText("Play");
        buttonPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPlayActionPerformed(evt);
            }
        });

        buttonStop.setText("stop");
        buttonStop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonStopActionPerformed(evt);
            }
        });

        buttonRewind.setText("<<");
        buttonRewind.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRewindActionPerformed(evt);
            }
        });

        buttonFastForward.setText(">>");
        buttonFastForward.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFastForwardActionPerformed(evt);
            }
        });

        buttonMute.setText("Mute");
        buttonMute.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonMuteActionPerformed(evt);
            }
        });

        sliderVolume.setValue(100);

        buttonFullScreen.setText("[ ]");
        buttonFullScreen.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonFullScreenActionPerformed(evt);
            }
        });

        sliderTime.setValue(0);

        buttonOpenFile.setText("Open File");
        buttonOpenFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonOpenFileActionPerformed(evt);
            }
        });

        textAreaInfo.setColumns(20);
        textAreaInfo.setRows(5);
        jScrollPane1.setViewportView(textAreaInfo);

        panelVideo.setLayout(new java.awt.BorderLayout());

        buttonPause.setText("Pause");
        buttonPause.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonPauseActionPerformed(evt);
            }
        });

        jLabel1.setText("The Coolest Audio/Video Player Ever");

        labelTime.setText("00:00:00");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(sliderTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(panelVideo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(buttonPause)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonPlay)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(buttonStop)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(buttonRewind)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonFastForward)
                                .addGap(81, 81, 81)
                                .addComponent(buttonMute)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(sliderVolume, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buttonFullScreen)
                                .addGap(31, 31, 31)))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addComponent(buttonOpenFile, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelTime, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 16, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(buttonOpenFile)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 117, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 203, Short.MAX_VALUE))
                    .addComponent(panelVideo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(labelTime)
                        .addGap(20, 20, 20))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(sliderTime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(buttonPlay)
                        .addComponent(buttonStop)
                        .addComponent(buttonRewind)
                        .addComponent(buttonFastForward)
                        .addComponent(buttonPause))
                    .addComponent(sliderVolume, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(buttonMute)
                    .addComponent(buttonFullScreen))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPlayActionPerformed
        myPlayer.play();
        if (myPlayer.absFileName!=null){
            buttonPause.setVisible(true);
            buttonPlay.setVisible(false);
        }
    }//GEN-LAST:event_buttonPlayActionPerformed

    private void buttonOpenFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonOpenFileActionPerformed
        final JFileChooser fc = new JFileChooser();
        int returnVal = fc.showOpenDialog(GUI.this);
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            String absPathFile = fc.getSelectedFile().getAbsolutePath();
            textAreaInfo.setText("Playing "+absPathFile);
            myPlayer.play(absPathFile);
            buttonPlay.setVisible(false);
            buttonPause.setVisible(true);
        }

    }//GEN-LAST:event_buttonOpenFileActionPerformed

    private void buttonStopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonStopActionPerformed
        if (myPlayer.absFileName!=null){
            myPlayer.stop();
            buttonPause.setVisible(false);
            buttonPlay.setVisible(true);
        }
    }//GEN-LAST:event_buttonStopActionPerformed

    private void buttonPauseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonPauseActionPerformed
        myPlayer.pause();
        buttonPause.setVisible(false);
        buttonPlay.setVisible(true);
    }//GEN-LAST:event_buttonPauseActionPerformed

    private void buttonMuteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonMuteActionPerformed
        if (buttonMute.getText().equalsIgnoreCase("Mute")){
            myPlayer.mute();
            buttonMute.setText("UnMute");
        }else{
            myPlayer.unMute();
            buttonMute.setText("Mute");
        }
        
    }//GEN-LAST:event_buttonMuteActionPerformed

    private void buttonFastForwardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFastForwardActionPerformed
        if (buttonFastForward.getText().equalsIgnoreCase("stop")){
            myPlayer.normalSpeed();
            buttonFastForward.setText(">>");
        }else{
            myPlayer.fastForward();
            buttonFastForward.setText("stop");
        }
        
    }//GEN-LAST:event_buttonFastForwardActionPerformed

    private void buttonRewindActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRewindActionPerformed
        if (buttonRewind.getText().equalsIgnoreCase("stop")){
            myPlayer.normalSpeed();
            buttonRewind.setText("<<");
        }else{
            myPlayer.rewind();
            buttonRewind.setText("stop");
        }
    }//GEN-LAST:event_buttonRewindActionPerformed

    private void buttonFullScreenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonFullScreenActionPerformed
        myPlayer.goFullScreen();
        
    }//GEN-LAST:event_buttonFullScreenActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GUI theGUI = new GUI();
                theGUI.setVisible(true);
            }
        });
        
        
        
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonFastForward;
    private javax.swing.JButton buttonFullScreen;
    private javax.swing.JButton buttonMute;
    private javax.swing.JButton buttonOpenFile;
    private javax.swing.JButton buttonPause;
    private javax.swing.JButton buttonPlay;
    private javax.swing.JButton buttonRewind;
    private javax.swing.JButton buttonStop;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelTime;
    private javax.swing.JPanel panelVideo;
    private javax.swing.JSlider sliderTime;
    private javax.swing.JSlider sliderVolume;
    private javax.swing.JTextArea textAreaInfo;
    // End of variables declaration//GEN-END:variables

    public void setPlayer(AudioVideoPlayer player){
        this.myPlayer = player;
    }
    
    public void setPanelVideo(JComponent c){
        panelVideo.removeAll();
        panelVideo.add(c);
        revalidate();
        repaint();
    }
    
    public void streamFinished(){
        buttonPause.setVisible(false);
        buttonPlay.setVisible(true);
    }
    
    public void setSliderTime(int time){
        sliderTime.setValue(time);       
    }
    
    public void setSliderTimeMax(int maxTime){
        sliderTime.setMaximum(maxTime);
    }
    
    public void setLabelTime(String time){
        labelTime.setText(time);
    }
    
    
}
